type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.3.3.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.PresentationError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.common.Utils.sleep;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isNumber;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",

            "Snippet #15",
            "Snippet #16",
            "Snippet #17",
            "Snippet #18",
            "Snippet #19",
            "Snippet #20",
            "Snippet #21",
            "Snippet #22",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();
        final Map<Integer, Integer> secs = new HashMap<>();
        final Map<Integer, Integer> views = new HashMap<>();

        boolean checkSecret = false;
        long freezeTime = 0;
        long awaitTime = 0;
        long sleepDurationSec = 0;
        long sleepLowerBound = 0;
        long sleepUpperBound = 0;

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        static void checkMissingId(Element doc, String url, String id) {
            Element elem = doc.getElementById(id);
            if (elem != null) {
                throw new WrongAnswer("GET " + url +
                    " shouldn't contain an element with id \"" + id + "\", but one was found");
            }
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 87
            () -> postSnippet(14),
            () -> postSnippet(15, 100, 20),
            () -> postSnippet(16),
            () -> postSnippet(17, 0, 5),
            () -> postSnippet(18),
            () -> postSnippet(19, 3, 0),
            () -> postSnippet(20),
            () -> postSnippet(21, 30, 0),

            // test 95
            () -> checkApiCode(14),
            () -> checkWebCode(14),
            () -> checkApiCode(16),
            () -> checkWebCode(16),
            () -> checkApiCode(18),
            () -> checkWebCode(18),
            () -> checkApiCode(20),
            () -> checkWebCode(20),

            // test 103
            () -> {
                freezeTime = System.currentTimeMillis();
                sleep(5000);
                return reloadServer();
            },

            // test 104
            () -> {
                awaitTime = System.currentTimeMillis();
                sleepDurationSec = (awaitTime - freezeTime) / 1000;
                sleepLowerBound = sleepDurationSec;
                sleepUpperBound = sleepLowerBound + 10;
                checkSecret = true;
                return CheckResult.correct();
            },

            // test 105
            () -> checkApiCode(15),
            () -> checkWebCode(15),
            () -> checkApiCode(17),
            () -> checkWebCode(17),
            () -> checkApiCode404(19),
            () -> checkWebCode404(19),
            () -> checkApiCode(21),
            () -> checkWebCode(21),

            // test 113
            () -> checkApiLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),
            () -> checkWebLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),

            // test 115
            () -> checkApiCode(17),
            () -> checkApiCode(17),
            () -> checkWebCode(17),
            () -> checkApiCode404(17),
            () -> checkWebCode404(17),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];
            int time = secs.get(id);
            int views = this.views.get(id);

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
                    .value("time", isInteger(i -> {
                        if (!checkSecret || time == 0) {
                            return i == 0;
                        }
                        int upperBound = (int) (time - sleepLowerBound);
                        int lowerBound = (int) (time - sleepUpperBound);
                        return i >= lowerBound && i <= upperBound;
                    }))
                    .value("views", isInteger(i -> {
                        if (!checkSecret || views == 0) {
                            return i == 0;
                        }
                        boolean result = i == views - 1;
                        this.views.put(id, views - 1);
                        return result;
                    }))

            );

            return CheckResult.correct();
        }

        private CheckResult checkApiCode404(int id) {
            HttpResponse resp = get(API_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);
            int time = secs.get(id);
            int views = this.views.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (time != 0) {
                Element timeSpan = getById(doc, req, "time_restriction", "span");
                String timeText = timeSpan.text();
                int timeOnPage;
                try {
                    timeOnPage = expect(timeText).toContain(1).integers().get(0);
                } catch (PresentationError ex) {
                    return CheckResult.wrong(
                        "GET " + req + " cannot find number of seconds inside \"time_restriction\" span element.\n" +
                        "Full text:\n" + timeSpan
                    );
                }
                int upperBound = (int) (time - sleepLowerBound);
                int lowerBound = (int) (time - sleepUpperBound);

                if (!(timeOnPage >= lowerBound && timeOnPage <= upperBound)) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain time restriction between " + lowerBound
                        + " and " + upperBound + ", found: " + timeOnPage + "\n" +
                        "Full text:\n" + timeSpan);
                }
            } else {
                checkMissingId(doc, req, "time_restriction");
            }

            if (views != 0) {
                Element viewsSpan = getById(doc, req, "views_restriction", "span");
                String viewsText = viewsSpan.text();
                int viewsOnPage = expect(viewsText).toContain(1).integers().get(0);

                if (viewsOnPage != views - 1) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain views restriction equal to " + (views - 1)
                        + ", found: " + viewsOnPage + "\n" +
                        "Full text:\n" + viewsSpan);
                }
                this.views.put(id, views - 1);
            } else {
                checkMissingId(doc, req, "views_restriction");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCode404(int id) {
            HttpResponse resp = get(WEB_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            return postSnippet(id, 0, 0);
        }

        private CheckResult postSnippet(int id, int secs, int views) {
            String snippet = SNIPPETS[id];
            this.secs.put(id, secs);
            this.views.put(id, views);

            HttpResponse resp = post(API_CODE_NEW,
                "{\"code\":\"" + snippet + "\", " +
                    "\"time\": " + secs +", " +
                    "\"views\": " + views + "}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        if (i.length() != 36) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                    .value("time", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                    .value("views", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/platform/model/Code.java
  visible: true
  text: |
    package platform.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Entity
    @Table(name = "code")
    public class Code {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @JsonIgnore
        private Long id;

        @NotBlank
        @Column(name = "code", columnDefinition = "CLOB")
        private String code;

        @Column(name = "date")
        @JsonProperty(access = JsonProperty.Access.READ_ONLY)
        private String date;
    }
  learner_created: true
- name: src/platform/model/EmptyJsonResponse.java
  visible: true
  text: |
    package platform.model;

    import com.fasterxml.jackson.databind.annotation.JsonSerialize;

    @JsonSerialize
    public class EmptyJsonResponse { }
  learner_created: true
- name: src/platform/controller/WebController.java
  visible: true
  text: |
    package platform.controller;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.server.ResponseStatusException;
    import org.springframework.web.servlet.ModelAndView;
    import platform.service.CodeService;

    import java.util.List;

    @Controller
    @RequestMapping(value = "/code", produces = MediaType.TEXT_HTML_VALUE)
    public class WebController {

        private final CodeService codeService;

        @Autowired
        public WebController(CodeService codeService) {
            this.codeService = codeService;
        }

        @GetMapping("{id}")
        public ModelAndView getCodeHtml(@PathVariable Long id) {
            return new ModelAndView("code_page")
                    .addObject("codes", List.of(codeService.getSnippet(id)
                            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND))))
                    .addObject("title", "Code");
        }

        @GetMapping("/new")
        public ModelAndView addCodeHtml() {
            return new ModelAndView("set_code_page");
        }

        @GetMapping("/latest")
        public ModelAndView latestCodeHtml() {
            return new ModelAndView("code_page")
                    .addObject("codes", codeService.latestSnippets())
                    .addObject("title", "Latest");
        }
    }
  learner_created: true
- name: src/platform/service/CodeService.java
  visible: true
  text: |
    package platform.service;

    import org.springframework.web.servlet.ModelAndView;
    import platform.model.Code;

    import java.util.List;
    import java.util.Optional;

    public interface CodeService {

        Optional<Code> getSnippet(Long id);

        Long addSnippet(Code code);

        List<Code> latestSnippets();
    }
  learner_created: true
- name: src/platform/controller/ApiController.java
  visible: true
  text: |
    package platform.controller;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;
    import platform.model.Code;
    import platform.service.CodeService;

    import java.util.List;
    import java.util.Map;

    @RestController
    @RequestMapping(value = "/api/code", produces = MediaType.APPLICATION_JSON_VALUE)
    public class ApiController {

        private final CodeService codeService;

        @Autowired
        public ApiController(CodeService codeService) {
            this.codeService = codeService;
        }

        @GetMapping("{id}")
        public Code getCode(@PathVariable Long id) {
            return codeService.getSnippet(id).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
        }

        @PostMapping("/new")
        public Map<String, String> setCode(@RequestBody Code code) {
            return Map.of("id", String.valueOf(codeService.addSnippet(code)));
        }

        @GetMapping("/latest")
        public List<Code> latestCode() {
            return codeService.latestSnippets();
        }
    }
  learner_created: true
- name: src/resources/static/sendJsonOnClick.js
  visible: true
  text: |-
    function send() {
        let object = {
            "code": document.getElementById("code_snippet").value
        };

        let json = JSON.stringify(object);

        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/api/code/new', false)
        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        xhr.send(json);

        if (xhr.status == 200) {
          alert("Success!");
        }

        //window.location.replace("http://localhost:8889/code");
    }
  learner_created: true
- name: src/resources/templates/code_page.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8">
        <link th:href="@{/main.css}" rel="stylesheet" />
        <title th:text="${title}"></title>
        <link rel="stylesheet"
              href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/styles/default.min.css">
        <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/highlight.min.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
    </head>
    <body>
        <a href="/code/new">Post new code snippet</a>
        <br><br>
        <th:block th:each="code : ${codes}">
            <span id="load_date" th:text="${code.date}"></span>
            <pre id="code_snippet"><code th:text="${code.code}"></code></pre>
        </th:block>
    </body>
    </html>
  learner_created: true
- name: src/resources/static/other.css
  visible: true
  text: |-
    .time {
                color: green;
                margin-bottom: 0;
            }

     .code {
                display: inline-block;
                background-color: gainsboro;
                border: 1px solid black;
                padding: 5px;
                margin-top: 0;
       }

      .code-form {
                display: block;
                padding: 5px;
                margin: 10px;
                width: 250px;
                height: 50px;
       }
  learner_created: true
- name: src/resources/templates/set_code_page.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8">
        <link th:href="@{/main.css}" rel="stylesheet" />
        <title>Create</title>
        <script type="text/javascript" th:src="@{/sendJsonOnClick.js}"></script>
    </head>
    <body>
        <textarea id="code_snippet"></textarea>
        <br>
        <button id="send_snippet" type="submit" onclick="send()">Submit</button>
    </body>
    </html>
  learner_created: true
- name: src/platform/repository/CodeRepository.java
  visible: true
  text: |
    package platform.repository;

    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;
    import platform.model.Code;
    import java.util.List;

    @Repository
    public interface CodeRepository extends CrudRepository<Code, Long> {

        int limit = 10;
        String query = "SELECT * FROM code ORDER BY id DESC limit " + limit;
        String countQuery = "SELECT * FROM code";

        @Query(value = query, countQuery = countQuery, nativeQuery = true)
        List<Code> findLatest();
    }
  learner_created: true
- name: src/platform/service/CodeServiceImpl.java
  visible: true
  text: |
    package platform.service;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import platform.model.Code;
    import platform.repository.CodeRepository;

    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class CodeServiceImpl implements CodeService {

        private final CodeRepository codeRepository;
        private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        @Autowired
        public CodeServiceImpl(CodeRepository codeRepository) {
            this.codeRepository = codeRepository;
        }

        @Override
        public Optional<Code> getSnippet(Long id) {
            return codeRepository.findById(id);
        }

        @Override
        public Long addSnippet(Code code) {
            code.setDate(LocalDateTime.now().format(formatter));
            return codeRepository.save(code).getId();
        }

        @Override
        public List<Code> latestSnippets() {
            return codeRepository.findLatest();
        }
    }
  learner_created: true
- name: src/resources/static/main.css
  visible: true
  text: |-
    span, a {
        color: #1b952a;
    }

    /*body {
        background-color: #c3ffb6;
    }*/

    pre, textarea, button {
        opacity: 1;
        border: 2px solid rgba(0, 0, 0, 0.5);
        border-radius: 3px;
        background-color: rgba(0, 0, 0, 0.1);
    }

    textarea {
        width: 500px;
        height: 150px;
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/130/stages/696/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #108

    GET /code/cad46864-a8c3-41c1-9bfa-47dac2dde5bb should contain an element with id &quot;views_restriction&quot;, no one found

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.3.RELEASE)

    2021-11-23 02:19:48.953  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : Starting CodeSharingPlatform on IvanPC with PID 1276 (started by IvanPC in C:\Users\IvanPC\Desktop\JAVA\Code Sharing Platform\Code Sharing Platform\task)
    2021-11-23 02:19:48.956  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : No active profile set, falling back to default profiles: default
    2021-11-23 02:19:49.682  INFO 1276 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2021-11-23 02:19:49.730  INFO 1276 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 41ms. Found 1 JPA repository interfaces.
    2021-11-23 02:19:50.151  INFO 1276 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
    2021-11-23 02:19:50.160  INFO 1276 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-11-23 02:19:50.160  INFO 1276 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
    2021-11-23 02:19:50.259  INFO 1276 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-11-23 02:19:50.260  INFO 1276 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1269 ms
    2021-11-23 02:19:50.378  INFO 1276 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2021-11-23 02:19:50.554  INFO 1276 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2021-11-23 02:19:50.562  INFO 1276 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../snippets&#39;
    2021-11-23 02:19:50.669  INFO 1276 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-11-23 02:19:50.707  INFO 1276 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-11-23 02:19:50.740  WARN 1276 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-11-23 02:19:50.774  INFO 1276 --- [         task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.20.Final
    2021-11-23 02:19:50.985  INFO 1276 --- [         task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
    2021-11-23 02:19:51.126  INFO 1276 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    Hibernate: create table code (id bigint generated by default as identity, code CLOB, date varchar(255), deadline varchar(255), time bigint, uuid varchar(255), views bigint, primary key (id))
    2021-11-23 02:19:51.793  INFO 1276 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-11-23 02:19:51.801  INFO 1276 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-11-23 02:19:51.869  INFO 1276 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-11-23 02:19:51.905  INFO 1276 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;
    2021-11-23 02:19:51.906  INFO 1276 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2021-11-23 02:19:52.129  INFO 1276 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2021-11-23 02:19:52.139  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : Started CodeSharingPlatform in 3.492 seconds (JVM running for 4.226)
    2021-11-23 02:19:52.402  INFO 1276 --- [nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-11-23 02:19:52.403  INFO 1276 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-11-23 02:19:52.409  INFO 1276 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: SELECT * FROM code WHERE time &lt;= 0 AND views &lt;= 0 ORDER BY id DESC limit 10
    Hibernate: SELECT * FROM code WHERE time &lt;= 0 AND views &lt;= 0 ORDER BY id DESC limit 10
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: SELECT * FROM code WHERE time &lt;= 0 AND views &lt;= 0 ORDER BY id DESC limit 10
    Hibernate: SELECT * FROM code WHERE time &lt;= 0 AND views &lt;= 0 ORDER BY id DESC limit 10
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: SELECT * FROM code WHERE time &lt;= 0 AND views &lt;= 0 ORDER BY id DESC limit 10
    Hibernate: SELECT * FROM code WHERE time &lt;= 0 AND views &lt;= 0 ORDER BY id DESC limit 10
    2021-11-23 02:19:53.989  INFO 1276 --- [       Thread-6] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-11-23 02:19:53.991  INFO 1276 --- [       Thread-6] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#39;applicationTaskExecutor&#39;
    2021-11-23 02:19:53.992  INFO 1276 --- [       Thread-6] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2021-11-23 02:19:54.005  INFO 1276 --- [       Thread-6] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.3.RELEASE)

    2021-11-23 02:19:54.101  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : Starting CodeSharingPlatform on IvanPC with PID 1276 (started by IvanPC in C:\Users\IvanPC\Desktop\JAVA\Code Sharing Platform\Code Sharing Platform\task)
    2021-11-23 02:19:54.101  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : No active profile set, falling back to default profiles: default
    2021-11-23 02:19:54.286  INFO 1276 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2021-11-23 02:19:54.294  INFO 1276 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 7ms. Found 1 JPA repository interfaces.
    2021-11-23 02:19:54.354  INFO 1276 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
    2021-11-23 02:19:54.355  INFO 1276 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-11-23 02:19:54.355  INFO 1276 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
    2021-11-23 02:19:54.379  INFO 1276 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-11-23 02:19:54.380  INFO 1276 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 277 ms
    2021-11-23 02:19:54.405  INFO 1276 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
    2021-11-23 02:19:54.411  INFO 1276 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
    2021-11-23 02:19:54.411  INFO 1276 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../snippets&#39;
    2021-11-23 02:19:54.437  INFO 1276 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-11-23 02:19:54.441  INFO 1276 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-11-23 02:19:54.447  INFO 1276 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-11-23 02:19:54.457  WARN 1276 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-11-23 02:19:54.489  INFO 1276 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-11-23 02:19:54.489  INFO 1276 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-11-23 02:19:54.562  INFO 1276 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-11-23 02:19:54.571  INFO 1276 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;
    2021-11-23 02:19:54.571  INFO 1276 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2021-11-23 02:19:54.593  INFO 1276 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2021-11-23 02:19:54.596  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : Started CodeSharingPlatform in 0.518 seconds (JVM running for 6.683)
    2021-11-23 02:19:54.600  INFO 1276 --- [nio-8889-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-11-23 02:19:54.600  INFO 1276 --- [nio-8889-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-11-23 02:19:54.602  INFO 1276 --- [nio-8889-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: SELECT * FROM code WHERE time &lt;= 0 AND views &lt;= 0 ORDER BY id DESC limit 10
    Hibernate: SELECT * FROM code WHERE time &lt;= 0 AND views &lt;= 0 ORDER BY id DESC limit 10
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: insert into code (id, code, date, deadline, time, uuid, views) values (null, ?, ?, ?, ?, ?, ?)
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    2021-11-23 02:20:00.440  INFO 1276 --- [       Thread-9] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-11-23 02:20:00.440  INFO 1276 --- [       Thread-9] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#39;applicationTaskExecutor&#39;
    2021-11-23 02:20:00.441  INFO 1276 --- [       Thread-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
    2021-11-23 02:20:00.449  INFO 1276 --- [       Thread-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.3.RELEASE)

    2021-11-23 02:20:00.533  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : Starting CodeSharingPlatform on IvanPC with PID 1276 (started by IvanPC in C:\Users\IvanPC\Desktop\JAVA\Code Sharing Platform\Code Sharing Platform\task)
    2021-11-23 02:20:00.533  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : No active profile set, falling back to default profiles: default
    2021-11-23 02:20:00.694  INFO 1276 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2021-11-23 02:20:00.700  INFO 1276 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 6ms. Found 1 JPA repository interfaces.
    2021-11-23 02:20:00.747  INFO 1276 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
    2021-11-23 02:20:00.747  INFO 1276 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-11-23 02:20:00.747  INFO 1276 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
    2021-11-23 02:20:00.769  INFO 1276 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-11-23 02:20:00.769  INFO 1276 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 234 ms
    2021-11-23 02:20:00.790  INFO 1276 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
    2021-11-23 02:20:00.794  INFO 1276 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
    2021-11-23 02:20:00.794  INFO 1276 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../snippets&#39;
    2021-11-23 02:20:00.817  INFO 1276 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-11-23 02:20:00.820  INFO 1276 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-11-23 02:20:00.826  INFO 1276 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-11-23 02:20:00.835  WARN 1276 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-11-23 02:20:00.860  INFO 1276 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-11-23 02:20:00.861  INFO 1276 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-11-23 02:20:00.932  INFO 1276 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-11-23 02:20:00.941  INFO 1276 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;
    2021-11-23 02:20:00.941  INFO 1276 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2021-11-23 02:20:00.960  INFO 1276 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2021-11-23 02:20:00.964  INFO 1276 --- [    Test worker] platform.CodeSharingPlatform             : Started CodeSharingPlatform in 0.449 seconds (JVM running for 13.05)
    2021-11-23 02:20:00.967  INFO 1276 --- [nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-11-23 02:20:00.967  INFO 1276 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-11-23 02:20:00.969  INFO 1276 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: update code set code=?, date=?, deadline=?, time=?, uuid=?, views=? where id=?
    Hibernate: update code set code=?, date=?, deadline=?, time=?, uuid=?, views=? where id=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: update code set code=?, date=?, deadline=?, time=?, uuid=?, views=? where id=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: update code set code=?, date=?, deadline=?, time=?, uuid=?, views=? where id=?
    Hibernate: select code0_.id as id1_0_, code0_.code as code2_0_, code0_.date as date3_0_, code0_.deadline as deadline4_0_, code0_.time as time5_0_, code0_.uuid as uuid6_0_, code0_.views as views7_0_ from code code0_ where code0_.uuid=?
    Hibernate: update code set code=?, date=?, deadline=?, time=?, uuid=?, views=? where id=?
  time: Mon, 22 Nov 2021 23:20:01 UTC
record: -1
